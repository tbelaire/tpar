# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

#######################################################################
# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = util_test circuit_test partition_test oracle_test
#######################################################################

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = gtest

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS_TEST = -g -Wall -Wextra -pthread


# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

test : $(TESTS:=.o) $(OBJS) gtest_main.a
	$(CXX) $(LDFLAGS) $(CXXFLAGS) $(CXXFLAGS_TEST) -o $@ $^
check : test
	./test

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) $(CPPFLAGS_TEST) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest-all.cc -o $@

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) $(CPPFLAGS_TEST) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest_main.cc -o $@

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^


%_test.o : %_test.cpp %.cpp %.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(CXXFLAGS_TEST) -c $< -o $@

# Only used if specified.
%_test : %_test.o $(OBJS) gtest_main.a
	$(CXX) $(LDFLAGS) $(CXXFLAGS) $(CXXFLAGS_TEST) $^ -o $@

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# sample1.o : sample1.cc sample1.h $(GTEST_HEADERS)
# 	$(CXX) $(CPPFLAGS) $(CPPFLAGS_TEST) $(CXXFLAGS) -c $<

# sample1_unittest.o : sample1_unittest.cc \
#                      sample1.h $(GTEST_HEADERS)
# 	$(CXX) $(CPPFLAGS) $(CPPFLAGS_TEST) $(CXXFLAGS) -c $<

# sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
# 	$(CXX) $(CPPFLAGS) $(CPPFLAGS_TEST) $(CXXFLAGS) -lpthread $^ -o $@
